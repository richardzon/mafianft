name: Mafia NFT CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  SOLANA_VERSION: 1.18.22
  ANCHOR_VERSION: 0.29.0
  NODE_VERSION: 18

jobs:
  test-smart-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node dependencies
      run: npm ci
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: Install Anchor CLI
      run: npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
      
    - name: Verify installations
      run: |
        solana --version
        anchor --version
        
    - name: Build Anchor programs
      run: anchor build
      
    - name: Run program validation
      run: node scripts/validate-programs.js
      
    - name: Run Anchor tests
      run: anchor test --skip-local-validator

  test-backend:
    name: Test Backend API
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mafianft_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install backend dependencies
      working-directory: backend
      run: npm ci
      
    - name: Run backend tests
      working-directory: backend
      run: npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mafianft_test
        REDIS_URL: redis://localhost:6379

  test-unity:
    name: Test Unity Client
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate Unity project structure
      run: node scripts/setup-unity-simple.js
      
    - name: Check Unity scripts compilation
      run: |
        # Basic syntax check for C# files
        find app/Assets/Scripts -name "*.cs" -exec echo "Checking {}" \;

  validate-deployment:
    name: Validate Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-smart-contracts, test-backend, test-unity]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run deployment validation
      run: node scripts/validate-deployment-ready.js
      
    - name: Generate AI art sample
      run: node scripts/generate-ai-art.js --count 10 --batch 5
      
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-validation
        path: |
          assets/generated/
          assets/metadata/
          *.json
          *.md

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-devnet:
    name: Deploy to Devnet
    runs-on: ubuntu-latest
    needs: [validate-deployment]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        
    - name: Install Solana CLI
      run: |
        sh -c "$(curl -sSfL https://release.solana.com/v${{ env.SOLANA_VERSION }}/install)"
        echo "$HOME/.local/share/solana/install/active_release/bin" >> $GITHUB_PATH
        
    - name: Install Anchor CLI
      run: npm install -g @coral-xyz/anchor-cli@${{ env.ANCHOR_VERSION }}
      
    - name: Setup Solana keypair
      run: |
        mkdir -p ~/.config/solana
        echo "${{ secrets.SOLANA_DEVNET_PRIVATE_KEY }}" > ~/.config/solana/id.json
        solana config set --url https://api.devnet.solana.com
        
    - name: Build programs
      run: anchor build
      
    - name: Deploy to devnet
      run: |
        solana airdrop 2
        anchor deploy --provider.cluster devnet
        
    - name: Initialize programs
      run: node scripts/initialize-programs.js devnet
      
    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: devnet-deployment
        path: |
          deployed-program-ids.json
          deployment-report-*.md
          initialization-summary-*.json

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-devnet]
    if: always()
    
    steps:
    - name: Notify Discord
      if: success()
      run: |
        curl -H "Content-Type: application/json" \
             -d '{"content": "üöÄ Mafia NFT successfully deployed to devnet! Ready for testing."}' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
             
    - name: Notify Discord on failure
      if: failure()
      run: |
        curl -H "Content-Type: application/json" \
             -d '{"content": "‚ùå Mafia NFT deployment failed. Check GitHub Actions for details."}' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}
